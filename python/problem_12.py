from lw.factors import count_divisors


def problem_definition():
    return '''The sequence of triangle numbers is generated by adding the natural numbers.
    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?'''


# Solved thanks to the hints of Project Euler overview :)
print(count_divisors(76576500))


maximum = 0
triangle = 0
for i in range(1, 1000000):
    triangle += i
    if triangle % 30 != 0:  # any number with a lot of divisors probably is multiple of this (2*3*5)
        continue

    divisors = count_divisors(triangle)
    if divisors > maximum:
        maximum = divisors
        print('New max: {} for {}'.format(maximum, triangle))
        if maximum > 500:
            break


# Solved by brute-force and a lot of patience
'''
def count_divisors(n):
    count = 0
    for i in range(1, n + 1):
        if n % i == 0:
            count += 1
    return count


maximum = 0
triangle = 0
for i in range(1, 1000000):
    triangle += i
    if triangle % 30 != 0:  # any number with a lot of divisors probably is multiple of this (2*3*5)
        continue

    divisors = count_divisors(triangle)
    if divisors > maximum:
        maximum = divisors
        print('New max: {} for {}'.format(maximum, triangle))

print(triangle)
'''
