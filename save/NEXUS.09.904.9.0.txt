@0
# MEM[IDX] += 1
ST: MOV UP DOWN
    MOV DOWN ACC
    JEZ ST
L1: MOV LEFT RIGHT
    SUB 1
    JNZ L1
MOV 1 ACC
ADD RIGHT
MOV ACC LEFT
MOV DOWN ACC
JEZ ST
L2: MOV RIGHT LEFT
    SUB 1
    JNZ L2

@1
# FILL EMPTY MEM
# PULL READY MEM
MOV 0 UP
MOV 0 UP
MOV 0 UP
MOV 0 UP
MOV 0 UP
MOV NIL RIGHT
MOV RIGHT NIL
MOV UP DOWN
MOV UP DOWN
MOV UP DOWN
MOV UP DOWN
MOV UP DOWN

@2
# PUSH/PULL UP
# SYNC W/ LEFT
MOV UP ACC
MOV LEFT NIL
JEZ EX
LP: MOV ACC UP
    SUB 1
    MOV ACC UP
    MOV UP ACC
    JNZ LP
EX: MOV NIL LEFT
    MOV 0 UP

# V KNOWS HIGHEST
# VALUE AND CMDS>

@3
## NAIVE
# ST: START
# L1: LOOP 1
# L2: LOOP 2
# LP: LOOP
# EX: EXIT
# NM: NEW MAX
# VO: VOID
# RS: RESTORE




# JUMP TABLE TO
# DIFFERENT OPS

@4
# PROVIDE MEM[I]
# TWICE; AFTER 5
# ITEMS MARK THE
# END THEN AWAIT
# 2 PULL UP MORE
MOV 5 ACC
LP: SWP
    MOV 1 RIGHT
    MOV UP ACC
    MOV ACC RIGHT
    MOV ACC RIGHT
    SWP
    SUB 1
    JNZ LP
MOV 12 RIGHT

@5
MOV 0 ACC
ST: JRO LEFT
    SUB LEFT
    JLZ NM
    JEZ VO
    MOV 1 RIGHT
RS: ADD LEFT
    JMP ST
VO: MOV 11 RIGHT
    JMP RS
NM: MOV 3 RIGHT
    MOV LEFT ACC
    JMP ST
MOV 6 RIGHT
MOV RIGHT DOWN

@6
WAIT: JRO LEFT
ADD 1 # INDEX++
JMP WAIT
ADD 1 # SAV INDEX
SAV
JMP WAIT
SWP   # PULL/RESET
MOV ACC LEFT
MOV 0 ACC
SAV
JMP WAIT
ADD 1 # VOID VALUE
SWP
MOV 0 ACC
SWP